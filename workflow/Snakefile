import pandas as pd

configfile: 'config/chip_seq.yaml'

def get_chip_table(genome):
    infile=f"resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
    experiment_tf = pd.read_csv(infile,sep='\t',usecols=[0,3])
    experiment_tf.columns = ['id','antigen']
    experiment_tf.sort_values(by='antigen',inplace=True)
    experiment_tf.reset_index(drop=True,inplace=True)

    return experiment_tf

def get_experiments_bw(wildcards):
    experiment_tf = get_chip_table(wildcards.genome)
    IDs = list(experiment_tf.loc[experiment_tf.antigen==wildcards.tf,'id'])
    files = [f"resources/tracks/{wildcards.genome}/{id}.bw" for id in IDs]

    return files

def get_experiments_bb(wildcards):
    experiment_tf = get_chip_table(wildcards.genome)
    IDs = list(experiment_tf.loc[experiment_tf.antigen==wildcards.tf,'id'])
    files = [f"resources/tracks/{wildcards.genome}/{id}.05.bb" for id in IDs]

    return files

def get_tfs(genome):
    experiment_tf = get_chip_table(genome)
    return list(experiment_tf.antigen.unique())

def get_all_svd_files(wildcards):
    TFs = get_tfs(wildcards.genome)
    svd_files = [f"results/{wildcards.genome}/svd/Window_pm{wildcards.window_kb}kb_bin_size_{wildcards.bin_size}/{tf}.hdf5" for tf in TFs]
    return svd_files

def get_tf_mean_wig_promoter(wildcards):
    TFs = get_tfs(wildcards.genome)
    files = [f"results/{wildcards.genome}/TF_mean_chip_prom_pm{wildcards.window_kb}kb/{tf}.wig" for tf in TFs]

    return files

wildcard_constraints:
    window_kb="|".join([str(w) for w in config['Window_kb']]),
    bin_size="|".join([str(b) for b in config['Bin_size']]),
    genome="|".join(config['Genome']),
    tf="|".join(get_tfs('mm10')) + "|" + "|".join(get_tfs('hg38'))

rule all:
    input:
        #
        #expand('results/mm10/TF_mean_chip/{tf}.wig', tf=get_tfs('mm10') ),
        #expand('results/mm10/TF_mean_chip_prom_pm{window_kb}kb/{tf}.wig', window_kb=config['Window_kb'], tf=get_tfs('mm10') ),
        #expand('results/mm10/Summed_TF_chip_prom_pm{window_kb}kb.bw', window_kb=config['Window_kb']),
        #expand('results/hg38/TF_mean_chip/{tf}.wig', tf=get_tfs('hg38') ),
        #expand('results/hg38/TF_mean_chip_prom_pm{window_kb}kb/{tf}.wig', window_kb=config['Window_kb'], tf=get_tfs('hg38') ),
        #expand('results/hg38/Summed_TF_chip_prom_pm{window_kb}kb.bw', window_kb=config['Window_kb']),
        #
        #expand('results/mm10/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('mm10') ),
        #expand('results/hg38/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('hg38') ),
        #expand('results/mm10/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5', window_kb=config['Window_kb'], tf=get_tfs('mm10') ),
        #expand('results/hg38/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5', window_kb=config['Window_kb'], tf=get_tfs('hg38') ),
        #expand('results/mm10/Peak_tables/Window_pm{window_kb}kb/{tf}.bed', window_kb=config['Window_kb'], tf=get_tfs('mm10') ),
        #expand('results/hg38/Peak_tables/Window_pm{window_kb}kb/{tf}.bed', window_kb=config['Window_kb'], tf=get_tfs('hg38') ),
        #
        #expand('results/{genome}/Peak_tensors/Window_pm{window_kb}kb/PeakCenter_nanmean_sparse_tensor_prom_tf_position.pt', window_kb=config['Window_kb'], genome=config['Genome']),
        #expand('results/{genome}/Peak_tensors/Window_pm{window_kb}kb/PeakCenter_mean_sparse_tensor_prom_tf_position.pt', window_kb=config['Window_kb'], genome=config['Genome']),
        #expand('results/{genome}/regulatory_regions_pm{window_kb}kb.npy', window_kb=config['Window_kb'], genome=config['Genome']),
        #expand('results/{genome}/N_sf_pm{window_kb}kb.npy', window_kb=config['Window_kb'], genome=config['Genome']),
        #expand('results/{genome}/N_sm_pm{window_kb}kb.npy', window_kb=config['Window_kb'], genome=config['Genome']),
        #
        #expand('results/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('mm10')),
        #expand('results/hg38/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('hg38')),
        #expand('results/fig/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.pdf', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('mm10')),
        #expand('results/fig/hg38/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.pdf', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('hg38')),
        #expand('results/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TF_mode_pos_prom.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size']),
        expand('results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TFsvd1_pos_prom.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], genome=config['Genome']),
        expand('results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TFsvd1_prom.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], genome=config['Genome']),
        #expand('results/fig/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/mean_chip_signal_per_promoter_per_tf.pdf', window_kb=config['Window_kb'], bin_size=config['Bin_size']),
        expand('results/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/bw/{tf}.bw', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('mm10')),
        expand('results/hg38/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/bw/{tf}.bw', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('hg38')),
        #
        #expand('results/{genome}/TF_Complex.tsv',genome=['mm10','hg38'])
        #expand('results/fig/{genome}/mean_chip_signal_per_promoter_per_tf.pdf',genome=['mm10','hg38'])
        #expand('results/mm10/TF_bedfiles/{tf}.bed', tf=get_tfs('mm10') ),
        #expand('results/hg38/TF_bedfiles/{tf}.bed', tf=get_tfs('hg38') ),
        #expand('results/mm10/TF_prom_bedfiles/{tf}.bed', tf=get_tfs('mm10') ),
        #expand('results/hg38/TF_prom_bedfiles/{tf}.bed', tf=get_tfs('hg38') )



# First download data: workflow/Dowload_experiments.smk
# Or rsync between servers

# Get chrom size
#rule chrom_size:
#    input:
#        chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
#    output:
#        chrom_size='resources/{genome}_chrom_size.txt'
#    shell:
#        """
#        python scripts/get_chrom_size.py --chip_experiment {input.chip} --genome {wildcards.genome} --outfile {output.chrom_size}
#        """

# Get mean chip signal across experiments for each TF, intersect with promoterome, sum across TFs.
rule mean_chip_TF:
    input:
        chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        exp_list=get_experiments_bw
    output:
        mean_wig='results/{genome}/TF_mean_chip/{tf}.wig'
    shell:
        """
        wiggletools mean {input.exp_list} > {output.mean_wig}
        """

rule intersect_mean_chip_TF_with_promoter:
    input:
        wig='results/{genome}/TF_mean_chip/{tf}.wig',
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed"
    output:
        wig_promoterome='results/{genome}/TF_mean_chip_prom_pm{window_kb}kb/{tf}.wig'
    shell:
        """
        wiggletools overlaps {input.promoterome} {input.wig} > {output.wig_promoterome}
        """

#rule sum_TF_chip:
#    input:
#        tf_wigs_promoterome=get_tf_mean_wig_promoter,
#        chrom_size='resources/{genome}_chrom_size.txt'
#    output:
#        sum_bw='results/{genome}/Summed_TF_chip_prom_pm{window_kb}kb.bw'
#    params:
#        sum_wig='results/{genome}/Summed_TF_chip_prom_pm{window_kb}kb.wig'
#    shell:
#        """
#        wiggletools sum {input.tf_wigs_promoterome} > {params.sum_wig}
#        wigToBigWig {params.sum_wig} {input.chrom_size} {output.sum_bw}
#        """

# get regulatory regions

rule make_WholePeak_prom_tf_pos_sparse_tensor:
    input:
        chip_experiment_table="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed"
    output:
        tensor='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/WholePeak_sparse_tensor_prom_tf_position.pt'
    threads: 46
    shell:
        """
        python scripts/make_peak_prom_tf_pos_sparse_tensor.py --chip_experiment_table {input.chip_experiment_table} \
                                                              --infile_promoterome {input.promoterome} \
                                                              --outfile {output.tensor} \
                                                              --window_kb {wildcards.window_kb} \
                                                              --genome {wildcards.genome} \
                                                              --threads {threads} \
        """

rule make_PeakCenter_nanmean_prom_tf_pos_sparse_tensor:
    input:
        chip_experiment_table="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed"
    output:
        tensor='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/PeakCenter_nanmean_sparse_tensor_prom_tf_position.pt'
    threads: 46
    shell:
        """
        python scripts/make_peak_prom_tf_pos_sparse_tensor.py --chip_experiment_table {input.chip_experiment_table} \
                                                              --infile_promoterome {input.promoterome} \
                                                              --outfile {output.tensor} \
                                                              --window_kb {wildcards.window_kb} \
                                                              --genome {wildcards.genome} \
                                                              --threads {threads} \
                                                              --peak_center_only \
                                                              --nanmean
        """

rule make_PeakCenter_mean_prom_tf_pos_sparse_tensor:
    input:
        chip_experiment_table="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed"
    output:
        tensor='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/PeakCenter_mean_sparse_tensor_prom_tf_position.pt'
    threads: 46
    shell:
        """
        python scripts/make_peak_prom_tf_pos_sparse_tensor.py --chip_experiment_table {input.chip_experiment_table} \
                                                              --infile_promoterome {input.promoterome} \
                                                              --outfile {output.tensor} \
                                                              --window_kb {wildcards.window_kb} \
                                                              --genome {wildcards.genome} \
                                                              --threads {threads} \
                                                              --peak_center_only
        """

rule get_regulatory_regions:
    input:
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
        atac_samples="/home/jbreda/ATACseq/resources/SraRunTable.txt",
        chip_peak_tensor="results/{genome}/Peak_tensors/Window_pm{window_kb}kb/PeakCenter_sparse_tensor_prom_tf_position.pt"
    output:
        bed='results/{genome}/regulatory_regions_pm{window_kb}kb.bed',
        npy='results/{genome}/regulatory_regions_pm{window_kb}kb.npy'
    threads: 36
    shell:
        """
        python scripts/get_regulatory_regions.py --genome {wildcards.genome} --window_kb {wildcards.window_kb} --promoterome {input.promoterome} --atac_samples {input.atac_samples} --chip_peak_sparse_tensor {input.chip_peak_tensor} --out_bedfile {output.bed} --out_matrix {output.npy}
        """

rule get_N_sf:
    input:
        regulatory_regions="results/{genome}/regulatory_regions_pm{window_kb}kb.bed",
        chip_experiments="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
    params:
        to_ignore='resources/failed_experiment_id_{genome}.txt'
    output:
        matrix='results/{genome}/N_sf_pm{window_kb}kb.npy'
    threads: 72
    shell:
        """
        python scripts/get_N_sf.py --genome {wildcards.genome} \
                                   --regulatory_regions {input.regulatory_regions} \
                                   --chip_experiments {input.chip_experiments} \
                                   --to_ignore {params.to_ignore} \
                                   --out_matrix {output.matrix} \
                                   --threads {threads}
        """

rule get_N_sm:
    input:
        regulatory_regions="results/{genome}/regulatory_regions_pm{window_kb}kb.bed",
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
        jaspar="/home/jbreda/Jaspar/results/{genome}/Window_pm{window_kb}kb/convolution_PromSeq_PWM.hdf5"
    output:
        matrix='results/{genome}/N_sm_pm{window_kb}kb.npy'
    params:
        pmw_threshold=config['PWM_threshold']
    shell:
        """
        python scripts/get_N_sm.py --regulatory_regions {input.regulatory_regions} \
                                   --promoterome {input.promoterome} \
                                   --jaspar_conv_tensor {input.jaspar} \
                                   --threshold {params.pmw_threshold} \
                                   --out_matrix {output.matrix}
        """


# Chip tensor TFsvd1 x pos x prom
rule make_chip_tensors:
    input:
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
        infile="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",# Dependence: used in get_experiments_bw
        exp_list=get_experiments_bw
    output:
        tensor='results/{genome}/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5'
    threads: 20
    shell:
        """
        python scripts/make_chip_promoter_experiment_tensors.py --promoterome {input.promoterome} \
                                                                --threads {threads} \
                                                                --tf {wildcards.tf} \
                                                                --genome {wildcards.genome} \
                                                                --window_kb {wildcards.window_kb} \
                                                                --bin_size {wildcards.bin_size} \
                                                                --outfile {output.tensor} \
                                                                --infiles_tf {input.exp_list}
        """

rule make_peak_tensors:
    input:
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
        infile="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",# Dependence: used in get_experiments_bb
        exp_list=get_experiments_bb
    output:
        tensor='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5'
    shell:
        """
        python scripts/make_peak_promoter_experiment_tensors.py --promoterome {input.promoterome} \
                                                                --tf {wildcards.tf} \
                                                                --genome {wildcards.genome} \
                                                                --window_kb {wildcards.window_kb} \
                                                                --outfile {output.tensor} \
                                                                --infiles_tf {input.exp_list}
        """

rule make_peak_tables:
    input:
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
        infile="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab", # Dependence: used in get_experiments_bb
        exp_list=get_experiments_bb
    output:
        table="results/{genome}/Peak_tables/Window_pm{window_kb}kb/{tf}.bed"
    shell:
        """
        python scripts/make_peak_gene_tf_table.py --promoterome {input.promoterome} \
                                                  --tf {wildcards.tf} \
                                                  --genome {wildcards.genome} \
                                                  --outfile {output.table} \
                                                  --infiles_tf {input.exp_list}
        """
        
rule svd:
    input:
        chip='results/{genome}/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5',
        peak='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5'
    output:
        svd='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5'
    threads: 24
    shell:
        """
        python scripts/get_Chip_svd.py --infile_chip {input.chip} --infile_peak {input.peak} --outfile {output.svd} --window_kb {wildcards.window_kb} --bin_size {wildcards.bin_size}
        """

rule plot_svd:
    input:
        svd='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5'
    output:
        fig='results/fig/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.pdf'
    shell:
        """
        python scripts/plot_svd_per_tf.py --infile {input.svd} --outfig {output.fig} 
        """

rule chrom_size:
    params:
        genome_fasta = lambda wildcards: config['Genome_fasta'][wildcards.genome]
    output:
        chrom_size = "resources/{genome}.chrom.sizes"
    shell:
        """
        if [ ! $(hostname -s) == "upnaesrv1" ]; then
            ml gcc/11.3.0 samtools
        fi
        samtools faidx {params.genome_fasta}
        cut -f1,2 {params.genome_fasta}.fai > {output.chrom_size}
        """

rule make_svd_bigwig:
    input:
        svd = "results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5",
        chrom_size = "resources/{genome}.chrom.sizes"
    params:
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed",
    output:
        bw='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/bw/{tf}.bw'
    shell:
        """
        python scripts/get_chip_1st_svd_bigwig.py --infile_svd {input.svd} \
                                                  --promoterome {params.promoterome} \
                                                  --chrom_size {input.chrom_size} \
                                                  --bin_size {wildcards.bin_size} \
                                                  --outfile {output.bw}
        """

rule make_track_hubs:
    input:
        chip=expand("resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",genome=['mm10','hg38']),
        mm10=expand('results/mm10/svd/{tf}.hdf5', tf=get_tfs('mm10') ),
        hg38=expand('results/hg38/svd/{tf}.hdf5', tf=get_tfs('hg38') )
    output:
        expand('track_hubs/{file}',file=config['Track_hub']['outfiles']),
    shell:
        """
        python scripts/make_track_hubs.py
        """

# rule Chip 1st comp. tensors: TFsvd1 x pos x prom and TFsvd1 x prom (mean across pos)
rule get_chip_1st_comp:
    input:
        svd_files=get_all_svd_files, # all svd files for dependence
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered_clustered_sorted.bed"
    output:
        tensor_tf_pos_prom='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TFsvd1_pos_prom.hdf5',
        tensor_tf_prom='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TFsvd1_prom.hdf5',
    threads: 32
    shell:
        """
        python scripts/get_chip_1st_svd_matrix.py --infile_promoterome {input.promoterome} \
                                                                           --infiles_svd {input.svd_files} \
                                                                           --outfile_tf_pos_prom {output.tensor_tf_pos_prom} \
                                                                           --outfile_tf_prom {output.tensor_tf_prom} \
                                                                           --genome {wildcards.genome} \
                                                                           --window_kb {wildcards.window_kb} \
                                                                           --threads {threads}
        """

rule plot_chip_1st_comp:
    input:
        infile_chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        tensor_tf_pos_prom='results/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TFsvd1_pos_prom.hdf5',
    output:
        fig='results/fig/{genome}/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/mean_chip_signal_per_promoter_per_tf.pdf'
    shell:
        """
        python scripts/plot_average_profile_per_TF.py --infile_chip {input.infile_chip} --infile_tf_pos_prom {input.tensor_tf_pos_prom} --outfig {output.fig} --genome {wildcards.genome} --window_kb {wildcards.window_kb} --bin_size {wildcards.bin_size}
        """

rule get_chip_tf_mode_pos_prom:
    input:
        svd_files=get_all_svd_files, # all svd files for dependence
        chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab",
        promoterome="/home/jbreda/Promoterome/results/{genome}/promoterome_pm{window_kb}kb_filtered.bed"
    output:
        tensor_tf_pos_prom='results/mm10/svd/Window_pm{window_kb}kb_bin_size_{bin_size}/tensor_TF_mode_pos_prom.hdf5',
    threads: 12
    shell:
        """
        python scripts/get_chip_svd_matrix.py --infile_chip {input.chip} \
                                              --infile_promoterome {input.promoterome} \
                                              --outfile_tf_pos_prom {output.tensor_tf_pos_prom} \
                                              --infiles_svd {input.svd} \
                                              --genome {wildcards.genome} \
                                              --window_kb {wildcards.window_kb}
        """

# run this rule only after downloading data with ./download_complex_data.sh
rule get_tf_complex:
    input:
        chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
    output:
        results="results/{genome}/TF_Complex.tsv"
    params:
        complexes = lambda wildcards: config['TF_Complex'][wildcards.genome]
    shell:
        """
        python scripts/get_complex_proteins.py  --infile_complex {params.complexes} --infile_chip {input.chip} --outfile {output.results}
        """
        
# rule multivariate_gaussian:
#   Multivariate_gaussian_gene_factor.py


# Chip peaks rules:
rule merge_peaks_per_tf:
    input:
        infile="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
    output:
        bedfile='results/{genome}/TF_bedfiles/{tf}.bed'
    threads: 4
    shell:
        """
        scripts/merge_tf_bigbeds.sh {wildcards.genome} {wildcards.tf} {input.infile} {output.bedfile}
        """

rule intersect_peaks_with_promoterome:
    input:
        bedfile='results/{genome}/TF_bedfiles/{tf}.bed',
        promoterome="/home/jbreda/Promoterome/results/{{genome}}/promoterome_pm{win}kb_filtered.bed".format(win = config['Window_kb'])
    output:
        bedfile='results/{genome}/TF_prom_bedfiles/{tf}.bed'
    shell:
        """
        bedtools intersect -a {input.bedfile} -b <(tail -n+2 {input.promoterome}) | bedtools sort | uniq > {output.bedfile}
        """

rule get_nr_of_peaks_per_prom:
    input:
        promoterome="/home/jbreda/Promoterome/results/{{genome}}/promoterome_pm{win}kb_filtered.bed".format(win = config['Window_kb']),
        chip="resources/experimentList_v3_{genome}_TFs_only_QC_filtered.tab"
    output:
        file='results/{genome}/nr_peaks_per_prom_per_tf.tsv'
    shell:
        """
        scripts/get_nr_of_peaks_per_prom_per_tf.sh {input.promoterome} {input.chip} {output.file}
        """