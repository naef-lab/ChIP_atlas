import pandas as pd

configfile: 'config/chip_seq.yaml'

#TF_EXPERIMENT = {}
#for genome in config['Genome']:
    #print(genome)
    # input/output
    #infile=f'resources/experimentList_{genome}_TFs_only.tab'
    # get tf:experiment dictionary
    #experiment_tf = pd.read_csv(infile,sep='\t',usecols=[0,3],index_col=0)
    #experiment_tf.index = [f'resources/tracks/{genome}/{x}.bw' for x in experiment_tf.index]
#    TF_EXPERIMENT[genome] = experiment_tf.groupby('Antigen').groups
#    for tf in TF_EXPERIMENT[genome]:
        #TF_EXPERIMENT[genome][tf] = list(TF_EXPERIMENT[genome][tf])

def get_chip_table(genome):
    infile=f"resources/experimentList_{genome}_TFs_only_QC_filtered.tab"
    experiment_tf = pd.read_csv(infile,sep='\t',usecols=[0,3])
    experiment_tf.columns = ['id','antigen']

    return experiment_tf

def get_experiments_bw(wildcards):
    experiment_tf = get_chip_table(wildcards.genome)
    IDs = list(experiment_tf.loc[experiment_tf.antigen==wildcards.tf,'id'])
    files = [f"resources/tracks/{wildcards.genome}/{id}.bw" for id in IDs]

    return files

def get_experiments_bb(wildcards):
    experiment_tf = get_chip_table(wildcards.genome)
    IDs = list(experiment_tf.loc[experiment_tf.antigen==wildcards.tf,'id'])
    files = [f"resources/tracks/{wildcards.genome}/{id}.05.bb" for id in IDs]

    return files

def get_tfs(genome):
    experiment_tf = get_chip_table(genome)

    return list(experiment_tf.antigen.unique())

def get_tfs_st_exp_gt1(genome):
    experiment_tf = get_chip_table(genome)
    experiment_tf.loc[:,'N'] = [(experiment_tf.antigen==tf).sum() for tf in experiment_tf.antigen]

    return list(experiment_tf.loc[experiment_tf.N>1,:].antigen.unique())

rule all:
    input:
        #"results/fig/hist_experiment_QC.pdf",
        #expand("resources/experimentList_{genome}_TFs_only_QC_filtered.tab",genome=['mm10','hg38']),
        #
        #expand('results/mm10/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/E2f1.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size']),
        #expand('results/mm10/Peak_tensors/Window_pm{window_kb}kb/E2f1.hdf5', window_kb=config['Window_kb']),
        #
        expand('results/mm10/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('mm10') ),
        expand('results/hg38/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5', window_kb=config['Window_kb'], bin_size=config['Bin_size'], tf=get_tfs('hg38') ),
        expand('results/mm10/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5', window_kb=config['Window_kb'], tf=get_tfs('mm10') ),
        expand('results/hg38/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5', window_kb=config['Window_kb'], tf=get_tfs('hg38') ),
        #expand('results/mm10/svd/{tf}.hdf5', tf=get_tfs('mm10') ),
        #expand('results/hg38/svd/{tf}.hdf5', tf=get_tfs('hg38') ),
        #expand('track_hubs/{file}',file=config['Track_hub']['outfiles']),
        #expand('results/fig/mm10/svd/{tf}.pdf', tf=get_tfs_st_exp_gt1('mm10') ),
        #expand('results/fig/hg38/svd/{tf}.pdf', tf=get_tfs_st_exp_gt1('hg38') ),
        #expand('results/{genome}/TF_Complex.tsv',genome=['mm10','hg38'])
        #expand('results/{genome}/tensor_TFsvd1_posbin_prom.hdf5',genome=['mm10','hg38']),
        #expand('results/fig/{genome}/mean_chip_signal_per_promoter_per_tf.pdf',genome=['mm10','hg38'])
        #expand('results/mm10/TF_bedfiles/{tf}.bed', tf=get_tfs('mm10') ),
        #expand('results/hg38/TF_bedfiles/{tf}.bed', tf=get_tfs('hg38') ),
        #expand('results/mm10/TF_prom_bedfiles/{tf}.bed', tf=get_tfs('mm10') ),
        #expand('results/hg38/TF_prom_bedfiles/{tf}.bed', tf=get_tfs('hg38') )




# Make GeneID to GeneName dictionary
rule GeneID_GeneName_Synonym_dict:
    input:
        "/bigdata/jbreda/genome/{genome}/{genome}_ENSID_Genename_synonyms.txt.gz"
    output:
        "/bigdata/jbreda/genome/{genome}/{genome}_GeneID_GeneName_Synonyms_dict.txt",
    shell:
        "python scripts/get_GeneID_GeneName_Synonym_dict.py --infile {input} --outfile {output}"

rule get_mm10_TF_list:
    input:
        TFs="/bigdata/jbreda/genome/mm10_TF_ID_list.csv",
        gene_dict="/bigdata/jbreda/genome/mm10/mm10_GeneID_GeneName_Synonyms_dict.txt"
    output:
        TFs="/bigdata/jbreda/genome/mm10_TF_list.csv"
    shell:
        """
        python scripts/get_mm_TF_list.py --infile_tf {input.TFs} --infile_gene_dict {input.gene_dict} --outfile {outpu.TFs}
        cp {output} /bigdata/jbreda/genome/mm39_TF_list.csv
        """

# Plot all QC stats for all genomes
rule plot_chip_experiments_stats_QC:
    input:
        chip="resources/experimentList.tab"
    output:
        antigen_class_per_genome="results/fig/hist_antigen_class_per_genome.pdf",
        QC="results/fig/hist_experiment_QC.pdf"
    params:    
        genomes=config['Genome'],
        th_reads=config['Threshold']['n_reads'],
        th_mapped_reads=config['Threshold']['f_mapped_reads'],
        th_duplicates=config['Threshold']['f_duplicates'],
        th_peaks=config['Threshold']['n_peaks']
    shell:
        "python scripts/plot_chip_atlas_stats.py --infile {input.chip} --outfig_antigen_class_per_genome {output.antigen_class_per_genome} --outfig_QC {output.QC} --genomes {params.genomes}  --th_reads {params.th_reads} --th_mapped_reads {params.th_mapped_reads} --th_duplicates {params.th_duplicates} --th_peaks {params.th_peaks}"

# Fliter experiment list based on QC thresholds
checkpoint get_ChIP_experiments_TF_QC_filtered:
    input:
        chip="resources/experimentList.tab",
        tfs="/bigdata/jbreda/genome/{genome}_TF_list.csv",
        gene_dict="/bigdata/jbreda/genome/{genome}/{genome}_ENSID_Genename_synonyms.txt.gz"
    output:
        "resources/experimentList_{genome}_TFs_only_QC_filtered.tab"
    params:
        th_reads=config['Threshold']['n_reads'],
        th_mapped_reads=config['Threshold']['f_mapped_reads'],
        th_duplicates=config['Threshold']['f_duplicates'],
        th_peaks=config['Threshold']['n_peaks'],
        th_exp_per_tf=config['Threshold']['n_exp_per_tf']
    shell:
        """
        python scripts/get_experimentList_TF.py --infile_chip {input.chip} --infile_tfs {input.tfs} --infile_gene_dict {input.gene_dict} --outfile {output} --genome {wildcards.genome} --th_reads {params.th_reads} --th_mapped_reads {params.th_mapped_reads} --th_duplicates {params.th_duplicates} --th_peaks {params.th_peaks} --th_exp_per_tf {params.th_exp_per_tf}
        """

# First download data: download_chip_data.sh -> check_tracks.py -> redownload_error_chip_data.sh
# Or rsync between servers
rule make_chip_tensors:
    input:
        infile="resources/experimentList_{genome}_TFs_only_QC_filtered.tab",# only for dependency
        exp_list=get_experiments_bw
    output:
        tensor='results/{genome}/Chip_tensors/Window_pm{window_kb}kb_bin_size_{bin_size}/{tf}.hdf5'
    threads: 12
    shell:
        """
        python scripts/make_chip_promoter_experiment_tensors.py --threads {threads} --tf {wildcards.tf} --genome {wildcards.genome} --window_kb {wildcards.window_kb} --bin_size {wildcards.bin_size} --outfile {output.tensor} --infiles_tf {input.exp_list}
        """

rule make_peak_tensors:
    input:
        infile="resources/experimentList_{genome}_TFs_only_QC_filtered.tab",# only for dependency
        exp_list=get_experiments_bb
    output:
        tensor='results/{genome}/Peak_tensors/Window_pm{window_kb}kb/{tf}.hdf5'
    shell:
        """
        python scripts/make_peak_promoter_experiment_tensors.py --tf {wildcards.tf} --genome {wildcards.genome} --window_kb {wildcards.window_kb} --outfile {output.tensor} --infiles_tf {input.exp_list}
        """

rule svd:
    input:
        tensor='results/{genome}/Chip_tensors/{tf}.hdf5'
    output:
        svd='results/{genome}/svd/{tf}.hdf5'
    params:
        size_factor=config['Normalization']['size_factor']
    threads: 12
    shell:
        """
        python scripts/get_Chip_svd.py --infile {input.tensor} --outfile {output.svd} --size_factor {params.size_factor}
        """

rule plot_svd:
    input:
        svd='results/{genome}/svd/{tf}.hdf5'
    output:
        fig='results/fig/{genome}/svd/{tf}.pdf'
    shell:
        """
        python scripts/plot_svd_per_tf.py --infile {input.svd} --outfig {output.fig} 
        """

rule make_track_hubs:
    input:
        chip=expand("resources/experimentList_{genome}_TFs_only_QC_filtered.tab",genome=['mm10','hg38']),
        mm10=expand('results/mm10/svd/{tf}.hdf5', tf=get_tfs('mm10') ),
        hg38=expand('results/hg38/svd/{tf}.hdf5', tf=get_tfs('hg38') )
    output:
        expand('track_hubs/{file}',file=config['Track_hub']['outfiles']),
    shell:
        """
        python scripts/make_track_hubs.py
        """

# run this rule only after downloading data with ./download_complex_data.sh
rule get_tf_complex:
    input:
        chip="resources/experimentList_{genome}_TFs_only_QC_filtered.tab"
    output:
        results="results/{genome}/TF_Complex.tsv"
    params:
        complexes = lambda wildcards: config['TF_Complex'][wildcards.genome]
    shell:
        """
        python scripts/get_complex_proteins.py  --infile_complex {params.complexes} --infile_chip {input.chip} --outfile {output.results}
        """

# rule Chip 1st comp. matrix:
rule get_chip_1st_comp:
    input:
        chip="resources/experimentList_{genome}_TFs_only_QC_filtered.tab",
        promoterome="/home/jbreda/Promoterome/results/{{genome}}/promoterome_pm{win}kb_filtered.bed".format(win = config['Window_kb'])
    output:
        file_tf_binnedPos_prom='results/{genome}/tensor_TFsvd1_tf_binnedpos_prom.hdf5',
        file_tf_pos_prom='results/{genome}/tensor_TFsvd1_tf_pos_prom.npy',
        fig='results/fig/{genome}/mean_chip_signal_per_promoter_per_tf.pdf'
    params:
        window_kb = config['Window_kb']
    threads: 12
    shell:
        """
        python scripts/get_chip_1st_svd_matrix_plot_signal_distribution.py --infile_chip {input.chip} --infile_promoterome {input.promoterome} --outfile_tf_binnedpos_prom {output.file_tf_binnedPos_prom} --outfile_tf_pos_prom {output.file_tf_pos_prom} --outfig {output.fig} --genome {wildcards.genome} --window_kb {params.window_kb}
        """
        
# rule multivariate_gaussian:
#   Multivariate_gaussian_gene_factor.py


# Chip peaks rules:

rule merge_peaks_per_tf:
    input:
        infile="resources/experimentList_{genome}_TFs_only_QC_filtered.tab"
    output:
        bedfile='results/{genome}/TF_bedfiles/{tf}.bed'
    threads: 4
    shell:
        """
        scripts/merge_tf_bigbeds.sh {wildcards.genome} {wildcards.tf} {input.infile} {output.bedfile}
        """

rule intersect_peaks_with_promoterome:
    input:
        bedfile='results/{genome}/TF_bedfiles/{tf}.bed',
        promoterome="/home/jbreda/Promoterome/results/{{genome}}/promoterome_pm{win}kb_filtered.bed".format(win = config['Window_kb'])
    output:
        bedfile='results/{genome}/TF_prom_bedfiles/{tf}.bed'
    shell:
        """
        bedtools intersect -a {input.bedfile} -b <(tail -n+2 {input.promoterome}) | bedtools sort | uniq > {output.bedfile}
        """

rule get_nr_of_peaks_per_prom:
    input:
        promoterome="/home/jbreda/Promoterome/results/{{genome}}/promoterome_pm{win}kb_filtered.bed".format(win = config['Window_kb']),
        chip="resources/experimentList_{genome}_TFs_only_QC_filtered.tab"
    output:
        file='results/{genome}/nr_peaks_per_prom_per_tf.tsv'
    shell:
        """
        scripts/get_nr_of_peaks_per_prom_per_tf.sh {input.promoterome} {input.chip} {output.file}
        """